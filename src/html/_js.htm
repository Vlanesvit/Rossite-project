<script>
	function initHeaderHeight() {
		const header = document.querySelector(".rs-header");
		const menuItemDropdowns = header.querySelectorAll(".menu__list .menu__dropdown");

		// Функция для обновления CSS переменной
		function updateHeaderHeight(includeDropdown = false) {
			// Если активен hover, не изменять высоту при скролле
			if (header.classList.contains("_header-hover") && !includeDropdown) {
				return;
			}

			let totalHeight = header.clientHeight;
			if (includeDropdown) {
				// Найти максимальную высоту .menu__dropdown_block
				const maxDropdownHeight = Math.max(
					...Array.from(document.querySelectorAll(".menu__dropdown_block")).map(block => block.clientHeight)
				);
				totalHeight += maxDropdownHeight;
			}
			header.style.setProperty("--header-height", `${totalHeight}px`);
		}

		menuItemDropdowns.forEach(item => {
			item.addEventListener("mouseenter", function () {
				header.classList.add("_header-hover");
				updateHeaderHeight(true);
			});
			item.addEventListener("mouseleave", function () {
				if (!document.documentElement.classList.contains("region-menu-open")) {
					header.classList.remove("_header-hover");
				}
				updateHeaderHeight();
			});
		});

		// Вызов функции один раз для установки начальной высоты
		updateHeaderHeight();

		// Обновление высоты при изменении размера и прокрутке страницы, только если hover не активен
		function handleResizeAndScroll() {
			updateHeaderHeight();
		}

		window.addEventListener("resize", handleResizeAndScroll);
		window.addEventListener("scroll", handleResizeAndScroll);
	}

	// Вызов функции при загрузке страницы
	window.addEventListener("DOMContentLoaded", initHeaderHeight);
</script>

<script>
	const loader = document.querySelector(".mg-loader");
	const percentageDisplay = document.getElementById("mg-percentage");

	let resourcesToLoad = 0;
	let resourcesLoaded = 0;
	let targetPercentage = 0;

	function showLoader() {
		loader.classList.add("show");
		loader.classList.remove("hide");
	}

	function hideLoader() {
		loader.classList.add("hide");
		loader.classList.remove("show");
	}

	function updatePercentage() {
		targetPercentage = resourcesToLoad > 0
			? Math.min(Math.floor((resourcesLoaded / resourcesToLoad) * 100), 100)
			: 100;

		let currentPercentage = parseInt(percentageDisplay.textContent) || 0;

		const animate = () => {
			if (currentPercentage < targetPercentage) {
				currentPercentage++; percentageDisplay.textContent = currentPercentage + "%";
				requestAnimationFrame(animate);
			} else if (currentPercentage > targetPercentage) {
				currentPercentage--;
				percentageDisplay.textContent = currentPercentage + "%";
				requestAnimationFrame(animate);
			} else if (currentPercentage === 100 && document.readyState === "complete") {
				hideLoader();
			}
		};
		animate();
	}

	function trackResourceLoad() {
		resourcesLoaded++;
		updatePercentage();

		if (resourcesLoaded >= resourcesToLoad) {
			if (document.readyState === "complete") {
				if (parseInt(percentageDisplay.textContent) === 100) {
					hideLoader();
				}
			} else {
				window.addEventListener("load", () => {
					if (parseInt(percentageDisplay.textContent) === 100) {
						hideLoader();
					}
				});
			}
		}
	}

	function loadResources() {
		resourcesToLoad = 0;
		resourcesLoaded = 0;
		percentageDisplay.textContent = "0%";

		// Отслеживание изображений
		const images = document.querySelectorAll("img");
		resourcesToLoad += images.length;

		images.forEach(img => {
			if (img.complete) {
				trackResourceLoad();
			} else {
				img.addEventListener("load", trackResourceLoad);
				img.addEventListener("error", trackResourceLoad);
			}
		});

		// Отслеживание видео
		const videos = document.querySelectorAll("video");
		resourcesToLoad += videos.length;

		videos.forEach(video => {
			if (video.readyState >= 3) {
				trackResourceLoad();
			} else {
				video.addEventListener("loadeddata", trackResourceLoad);
				video.addEventListener("error", trackResourceLoad);
			}
		});

		// Отслеживание скриптов
		const scriptToLoad = document.querySelector("script[src*=\'app.min.js\'], script[src*=\'app.js\']");
		if (scriptToLoad) {
			scriptToLoad.addEventListener("load", trackResourceLoad);
			scriptToLoad.addEventListener("error", trackResourceLoad);
		}

		// Если ресурсов нет, скрываем загрузчик
		if (resourcesToLoad === 0) {
			hideLoader();
		}
	}

	window.addEventListener("DOMContentLoaded", () => {
		showLoader();
		loadResources();
	});
</script>

<script src="js/app.min.js" defer></script>